//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.7

// ignore_for_file: unused_import

import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

part 'subtitle.g.dart';

abstract class Subtitle implements Built<Subtitle, SubtitleBuilder> {

    /// Whether the subtitle is auto generated.
    @nullable
    @BuiltValueField(wireName: r'autoGenerated')
    bool get autoGenerated;

    /// The language code of the subtitle.
    @nullable
    @BuiltValueField(wireName: r'code')
    String get code;

    /// The mime type of the subtitle.
    @nullable
    @BuiltValueField(wireName: r'mimeType')
    String get mimeType;

    /// The URL of the subtitle.
    @nullable
    @BuiltValueField(wireName: r'url')
    String get url;

    Subtitle._();

    static void _initializeBuilder(SubtitleBuilder b) => b;

    factory Subtitle([void updates(SubtitleBuilder b)]) = _$Subtitle;

    @BuiltValueSerializer(custom: true)
    static Serializer<Subtitle> get serializer => _$SubtitleSerializer();
}

class _$SubtitleSerializer implements StructuredSerializer<Subtitle> {

    @override
    final Iterable<Type> types = const [Subtitle, _$Subtitle];
    @override
    final String wireName = r'Subtitle';

    @override
    Iterable<Object> serialize(Serializers serializers, Subtitle object,
        {FullType specifiedType = FullType.unspecified}) {
        final result = <Object>[];
        if (object.autoGenerated != null) {
            result
                ..add(r'autoGenerated')
                ..add(serializers.serialize(object.autoGenerated,
                    specifiedType: const FullType(bool)));
        }
        if (object.code != null) {
            result
                ..add(r'code')
                ..add(serializers.serialize(object.code,
                    specifiedType: const FullType(String)));
        }
        if (object.mimeType != null) {
            result
                ..add(r'mimeType')
                ..add(serializers.serialize(object.mimeType,
                    specifiedType: const FullType(String)));
        }
        if (object.url != null) {
            result
                ..add(r'url')
                ..add(serializers.serialize(object.url,
                    specifiedType: const FullType(String)));
        }
        return result;
    }

    @override
    Subtitle deserialize(Serializers serializers, Iterable<Object> serialized,
        {FullType specifiedType = FullType.unspecified}) {
        final result = SubtitleBuilder();

        final iterator = serialized.iterator;
        while (iterator.moveNext()) {
            final key = iterator.current as String;
            iterator.moveNext();
            final dynamic value = iterator.current;
            switch (key) {
                case r'autoGenerated':
                    result.autoGenerated = serializers.deserialize(value,
                        specifiedType: const FullType(bool)) as bool;
                    break;
                case r'code':
                    result.code = serializers.deserialize(value,
                        specifiedType: const FullType(String)) as String;
                    break;
                case r'mimeType':
                    result.mimeType = serializers.deserialize(value,
                        specifiedType: const FullType(String)) as String;
                    break;
                case r'url':
                    result.url = serializers.deserialize(value,
                        specifiedType: const FullType(String)) as String;
                    break;
            }
        }
        return result.build();
    }
}

