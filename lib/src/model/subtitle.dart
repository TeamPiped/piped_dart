//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

// ignore_for_file: unused_element
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

part 'subtitle.g.dart';

/// Subtitle
///
/// Properties:
/// * [autoGenerated] - Whether the subtitle is auto generated.
/// * [code] - The language code of the subtitle.
/// * [mimeType] - The mime type of the subtitle.
/// * [url] - The URL of the subtitle.
@BuiltValue()
abstract class Subtitle implements Built<Subtitle, SubtitleBuilder> {
  /// Whether the subtitle is auto generated.
  @BuiltValueField(wireName: r'autoGenerated')
  bool? get autoGenerated;

  /// The language code of the subtitle.
  @BuiltValueField(wireName: r'code')
  String? get code;

  /// The mime type of the subtitle.
  @BuiltValueField(wireName: r'mimeType')
  String? get mimeType;

  /// The URL of the subtitle.
  @BuiltValueField(wireName: r'url')
  String? get url;

  Subtitle._();

  factory Subtitle([void updates(SubtitleBuilder b)]) = _$Subtitle;

  @BuiltValueHook(initializeBuilder: true)
  static void _defaults(SubtitleBuilder b) => b;

  @BuiltValueSerializer(custom: true)
  static Serializer<Subtitle> get serializer => _$SubtitleSerializer();
}

class _$SubtitleSerializer implements PrimitiveSerializer<Subtitle> {
  @override
  final Iterable<Type> types = const [Subtitle, _$Subtitle];

  @override
  final String wireName = r'Subtitle';

  Iterable<Object?> _serializeProperties(
    Serializers serializers,
    Subtitle object, {
    FullType specifiedType = FullType.unspecified,
  }) sync* {
    if (object.autoGenerated != null) {
      yield r'autoGenerated';
      yield serializers.serialize(
        object.autoGenerated,
        specifiedType: const FullType(bool),
      );
    }
    if (object.code != null) {
      yield r'code';
      yield serializers.serialize(
        object.code,
        specifiedType: const FullType(String),
      );
    }
    if (object.mimeType != null) {
      yield r'mimeType';
      yield serializers.serialize(
        object.mimeType,
        specifiedType: const FullType(String),
      );
    }
    if (object.url != null) {
      yield r'url';
      yield serializers.serialize(
        object.url,
        specifiedType: const FullType(String),
      );
    }
  }

  @override
  Object serialize(
    Serializers serializers,
    Subtitle object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    return _serializeProperties(serializers, object, specifiedType: specifiedType).toList();
  }

  void _deserializeProperties(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
    required List<Object?> serializedList,
    required SubtitleBuilder result,
    required List<Object?> unhandled,
  }) {
    for (var i = 0; i < serializedList.length; i += 2) {
      final key = serializedList[i] as String;
      final value = serializedList[i + 1];
      switch (key) {
        case r'autoGenerated':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(bool),
          ) as bool;
          result.autoGenerated = valueDes;
          break;
        case r'code':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.code = valueDes;
          break;
        case r'mimeType':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.mimeType = valueDes;
          break;
        case r'url':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.url = valueDes;
          break;
        default:
          unhandled.add(key);
          unhandled.add(value);
          break;
      }
    }
  }

  @override
  Subtitle deserialize(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = SubtitleBuilder();
    final serializedList = (serialized as Iterable<Object?>).toList();
    final unhandled = <Object?>[];
    _deserializeProperties(
      serializers,
      serialized,
      specifiedType: specifiedType,
      serializedList: serializedList,
      unhandled: unhandled,
      result: result,
    );
    return result.build();
  }
}

